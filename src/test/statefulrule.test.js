"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//import { Template, Match } from 'aws-cdk-lib/assertions';
//import { Template } from 'aws-cdk-lib/assertions';
//import * as cdk from 'aws-cdk-lib/core';
const NetFW = require("../lib");
test('Default properties 5Tuple Rule', () => {
    // GIVEN
    // WHEN
    const stateful5TupleRule = new NetFW.Stateful5TupleRule({
        action: NetFW.StatefulStandardAction.DROP,
    });
    expect(stateful5TupleRule.resource).toStrictEqual({
        action: 'DROP',
        header: {
            destination: 'ANY',
            destinationPort: 'ANY',
            direction: 'ANY',
            protocol: 'IP',
            source: 'ANY',
            sourcePort: 'ANY',
        },
        ruleOptions: [],
    });
});
test('Given properties 5Tuple Rule', () => {
    // GIVEN
    // WHEN
    const stateful5TupleRule = new NetFW.Stateful5TupleRule({
        action: NetFW.StatefulStandardAction.DROP,
        destinationPort: '80',
        destination: '$HOME_NET',
        protocol: 'TCP',
        sourcePort: '0-65535',
        source: '10.0.0.0/16, 10.10.0.0/16',
        ruleOptions: [
            {
                keyword: 'HOME_NET',
                settings: ['10.0.0.0/16', '10.10.0.0/16'],
            },
            {
                keyword: 'INTERNET_NET',
                settings: ['!$HOME_NET'],
            },
        ],
        direction: NetFW.Stateful5TupleDirection.FORWARD,
    });
    expect(stateful5TupleRule.resource).toStrictEqual({
        action: 'DROP',
        header: {
            destination: '$HOME_NET',
            destinationPort: '80',
            direction: 'FORWARD',
            protocol: 'TCP',
            source: '10.0.0.0/16, 10.10.0.0/16',
            sourcePort: '0-65535',
        },
        ruleOptions: [
            {
                keyword: 'HOME_NET',
                settings: ['10.0.0.0/16', '10.10.0.0/16'],
            },
            {
                keyword: 'INTERNET_NET',
                settings: ['!$HOME_NET'],
            },
        ],
    });
});
test('Default properties Domain List', () => {
    // GIVEN
    // WHEN
    const statefulDomainListRule = new NetFW.StatefulDomainListRule({
        type: NetFW.StatefulDomainListType.DENYLIST,
        targets: [],
        targetTypes: [],
    });
    expect(statefulDomainListRule.resource).toStrictEqual({
        generatedRulesType: 'DENYLIST',
        targets: [],
        targetTypes: [],
    });
});
test('Given properties Domain List', () => {
    // GIVEN
    // WHEN
    const statefulDomainListRule = new NetFW.StatefulDomainListRule({
        type: NetFW.StatefulDomainListType.ALLOWLIST,
        targets: ['*.example.com', 'example.com'],
        targetTypes: [
            NetFW.StatefulDomainListTargetType.TLS_SNI,
            NetFW.StatefulDomainListTargetType.HTTP_HOST,
        ],
    });
    expect(statefulDomainListRule.resource).toStrictEqual({
        generatedRulesType: 'ALLOWLIST',
        targets: ['*.example.com', 'example.com'],
        targetTypes: ['TLS_SNI', 'HTTP_HOST'],
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVmdWxydWxlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGF0ZWZ1bHJ1bGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUEyRDtBQUMzRCxvREFBb0Q7QUFDcEQsMENBQTBDO0FBQzFDLGdDQUFnQztBQUVoQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUN0RCxNQUFNLEVBQUUsS0FBSyxDQUFDLHNCQUFzQixDQUFDLElBQUk7S0FDMUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUNoRCxNQUFNLEVBQUUsTUFBTTtRQUNkLE1BQU0sRUFBRTtZQUNOLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLEtBQUs7WUFDYixVQUFVLEVBQUUsS0FBSztTQUNsQjtRQUNELFdBQVcsRUFBRSxFQUFFO0tBQ2hCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUN4QyxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUM7UUFDdEQsTUFBTSxFQUFFLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJO1FBQ3pDLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLFFBQVEsRUFBRSxLQUFLO1FBQ2YsVUFBVSxFQUFFLFNBQVM7UUFDckIsTUFBTSxFQUFFLDJCQUEyQjtRQUNuQyxXQUFXLEVBQUU7WUFDWDtnQkFDRSxPQUFPLEVBQUUsVUFBVTtnQkFDbkIsUUFBUSxFQUFFLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQzthQUMxQztZQUNEO2dCQUNFLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDekI7U0FDRjtRQUNELFNBQVMsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsT0FBTztLQUNqRCxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ2hELE1BQU0sRUFBRSxNQUFNO1FBQ2QsTUFBTSxFQUFFO1lBQ04sV0FBVyxFQUFFLFdBQVc7WUFDeEIsZUFBZSxFQUFFLElBQUk7WUFDckIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsUUFBUSxFQUFFLEtBQUs7WUFDZixNQUFNLEVBQUUsMkJBQTJCO1lBQ25DLFVBQVUsRUFBRSxTQUFTO1NBQ3RCO1FBQ0QsV0FBVyxFQUFFO1lBQ1g7Z0JBQ0UsT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLFFBQVEsRUFBRSxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUM7YUFDMUM7WUFDRDtnQkFDRSxPQUFPLEVBQUUsY0FBYztnQkFDdkIsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDO2FBQ3pCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDMUMsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNLHNCQUFzQixHQUFHLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDO1FBQzlELElBQUksRUFBRSxLQUFLLENBQUMsc0JBQXNCLENBQUMsUUFBUTtRQUMzQyxPQUFPLEVBQUUsRUFBRTtRQUNYLFdBQVcsRUFBRSxFQUFFO0tBQ2hCLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDcEQsa0JBQWtCLEVBQUUsVUFBVTtRQUM5QixPQUFPLEVBQUUsRUFBRTtRQUNYLFdBQVcsRUFBRSxFQUFFO0tBQ2hCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUN4QyxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUM7UUFDOUQsSUFBSSxFQUFFLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTO1FBQzVDLE9BQU8sRUFBRSxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUM7UUFDekMsV0FBVyxFQUFFO1lBQ1gsS0FBSyxDQUFDLDRCQUE0QixDQUFDLE9BQU87WUFDMUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLFNBQVM7U0FDN0M7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ3BELGtCQUFrQixFQUFFLFdBQVc7UUFDL0IsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQztRQUN6QyxXQUFXLEVBQUUsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO0tBQ3RDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgeyBUZW1wbGF0ZSwgTWF0Y2ggfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcbi8vaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcbi8vaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliL2NvcmUnO1xuaW1wb3J0ICogYXMgTmV0RlcgZnJvbSAnLi4vbGliJztcblxudGVzdCgnRGVmYXVsdCBwcm9wZXJ0aWVzIDVUdXBsZSBSdWxlJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAvLyBXSEVOXG4gIGNvbnN0IHN0YXRlZnVsNVR1cGxlUnVsZSA9IG5ldyBOZXRGVy5TdGF0ZWZ1bDVUdXBsZVJ1bGUoe1xuICAgIGFjdGlvbjogTmV0RlcuU3RhdGVmdWxTdGFuZGFyZEFjdGlvbi5EUk9QLFxuICB9KTtcblxuICBleHBlY3Qoc3RhdGVmdWw1VHVwbGVSdWxlLnJlc291cmNlKS50b1N0cmljdEVxdWFsKHtcbiAgICBhY3Rpb246ICdEUk9QJyxcbiAgICBoZWFkZXI6IHtcbiAgICAgIGRlc3RpbmF0aW9uOiAnQU5ZJyxcbiAgICAgIGRlc3RpbmF0aW9uUG9ydDogJ0FOWScsXG4gICAgICBkaXJlY3Rpb246ICdBTlknLFxuICAgICAgcHJvdG9jb2w6ICdJUCcsXG4gICAgICBzb3VyY2U6ICdBTlknLFxuICAgICAgc291cmNlUG9ydDogJ0FOWScsXG4gICAgfSxcbiAgICBydWxlT3B0aW9uczogW10sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0dpdmVuIHByb3BlcnRpZXMgNVR1cGxlIFJ1bGUnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIC8vIFdIRU5cbiAgY29uc3Qgc3RhdGVmdWw1VHVwbGVSdWxlID0gbmV3IE5ldEZXLlN0YXRlZnVsNVR1cGxlUnVsZSh7XG4gICAgYWN0aW9uOiBOZXRGVy5TdGF0ZWZ1bFN0YW5kYXJkQWN0aW9uLkRST1AsXG4gICAgZGVzdGluYXRpb25Qb3J0OiAnODAnLFxuICAgIGRlc3RpbmF0aW9uOiAnJEhPTUVfTkVUJyxcbiAgICBwcm90b2NvbDogJ1RDUCcsXG4gICAgc291cmNlUG9ydDogJzAtNjU1MzUnLFxuICAgIHNvdXJjZTogJzEwLjAuMC4wLzE2LCAxMC4xMC4wLjAvMTYnLFxuICAgIHJ1bGVPcHRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGtleXdvcmQ6ICdIT01FX05FVCcsXG4gICAgICAgIHNldHRpbmdzOiBbJzEwLjAuMC4wLzE2JywgJzEwLjEwLjAuMC8xNiddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5d29yZDogJ0lOVEVSTkVUX05FVCcsXG4gICAgICAgIHNldHRpbmdzOiBbJyEkSE9NRV9ORVQnXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBkaXJlY3Rpb246IE5ldEZXLlN0YXRlZnVsNVR1cGxlRGlyZWN0aW9uLkZPUldBUkQsXG4gIH0pO1xuXG4gIGV4cGVjdChzdGF0ZWZ1bDVUdXBsZVJ1bGUucmVzb3VyY2UpLnRvU3RyaWN0RXF1YWwoe1xuICAgIGFjdGlvbjogJ0RST1AnLFxuICAgIGhlYWRlcjoge1xuICAgICAgZGVzdGluYXRpb246ICckSE9NRV9ORVQnLFxuICAgICAgZGVzdGluYXRpb25Qb3J0OiAnODAnLFxuICAgICAgZGlyZWN0aW9uOiAnRk9SV0FSRCcsXG4gICAgICBwcm90b2NvbDogJ1RDUCcsXG4gICAgICBzb3VyY2U6ICcxMC4wLjAuMC8xNiwgMTAuMTAuMC4wLzE2JyxcbiAgICAgIHNvdXJjZVBvcnQ6ICcwLTY1NTM1JyxcbiAgICB9LFxuICAgIHJ1bGVPcHRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGtleXdvcmQ6ICdIT01FX05FVCcsXG4gICAgICAgIHNldHRpbmdzOiBbJzEwLjAuMC4wLzE2JywgJzEwLjEwLjAuMC8xNiddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5d29yZDogJ0lOVEVSTkVUX05FVCcsXG4gICAgICAgIHNldHRpbmdzOiBbJyEkSE9NRV9ORVQnXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG59KTtcblxudGVzdCgnRGVmYXVsdCBwcm9wZXJ0aWVzIERvbWFpbiBMaXN0JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAvLyBXSEVOXG4gIGNvbnN0IHN0YXRlZnVsRG9tYWluTGlzdFJ1bGUgPSBuZXcgTmV0RlcuU3RhdGVmdWxEb21haW5MaXN0UnVsZSh7XG4gICAgdHlwZTogTmV0RlcuU3RhdGVmdWxEb21haW5MaXN0VHlwZS5ERU5ZTElTVCxcbiAgICB0YXJnZXRzOiBbXSxcbiAgICB0YXJnZXRUeXBlczogW10sXG4gIH0pO1xuXG4gIGV4cGVjdChzdGF0ZWZ1bERvbWFpbkxpc3RSdWxlLnJlc291cmNlKS50b1N0cmljdEVxdWFsKHtcbiAgICBnZW5lcmF0ZWRSdWxlc1R5cGU6ICdERU5ZTElTVCcsXG4gICAgdGFyZ2V0czogW10sXG4gICAgdGFyZ2V0VHlwZXM6IFtdLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdHaXZlbiBwcm9wZXJ0aWVzIERvbWFpbiBMaXN0JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAvLyBXSEVOXG4gIGNvbnN0IHN0YXRlZnVsRG9tYWluTGlzdFJ1bGUgPSBuZXcgTmV0RlcuU3RhdGVmdWxEb21haW5MaXN0UnVsZSh7XG4gICAgdHlwZTogTmV0RlcuU3RhdGVmdWxEb21haW5MaXN0VHlwZS5BTExPV0xJU1QsXG4gICAgdGFyZ2V0czogWycqLmV4YW1wbGUuY29tJywgJ2V4YW1wbGUuY29tJ10sXG4gICAgdGFyZ2V0VHlwZXM6IFtcbiAgICAgIE5ldEZXLlN0YXRlZnVsRG9tYWluTGlzdFRhcmdldFR5cGUuVExTX1NOSSxcbiAgICAgIE5ldEZXLlN0YXRlZnVsRG9tYWluTGlzdFRhcmdldFR5cGUuSFRUUF9IT1NULFxuICAgIF0sXG4gIH0pO1xuXG4gIGV4cGVjdChzdGF0ZWZ1bERvbWFpbkxpc3RSdWxlLnJlc291cmNlKS50b1N0cmljdEVxdWFsKHtcbiAgICBnZW5lcmF0ZWRSdWxlc1R5cGU6ICdBTExPV0xJU1QnLFxuICAgIHRhcmdldHM6IFsnKi5leGFtcGxlLmNvbScsICdleGFtcGxlLmNvbSddLFxuICAgIHRhcmdldFR5cGVzOiBbJ1RMU19TTkknLCAnSFRUUF9IT1NUJ10sXG4gIH0pO1xufSk7XG4iXX0=