"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//import { Template, Match } from 'aws-cdk-lib/assertions';
//import { Template } from 'aws-cdk-lib/assertions';
//import * as cdk from 'aws-cdk-lib/core';
const NetFW = require("../lib");
test('Default properties', () => {
    // GIVEN
    // WHEN
    const statelessrule = new NetFW.StatelessRule({
        actions: [NetFW.StatelessStandardAction.DROP],
    });
    // THEN
    expect(statelessrule.resource).toStrictEqual({
        matchAttributes: {
            destinationPorts: undefined,
            destinations: [],
            protocols: undefined,
            sourcePorts: undefined,
            sources: [],
            tcpFlags: undefined,
        },
        actions: ['aws:drop'],
    });
    expect(statelessrule.calculateCapacity()).toBe(1);
});
test('Given properties', () => {
    // GIVEN
    // WHEN
    const statelessrule = new NetFW.StatelessRule({
        actions: [NetFW.StatelessStandardAction.DROP, 'customAction'],
        destinationPorts: [
            {
                fromPort: 80,
                toPort: 80,
            },
            {
                fromPort: 443,
                toPort: 443,
            },
        ],
        destinations: ['10.0.0.0/16, 10.10.0.0/16'],
        sourcePorts: [{
                fromPort: 0,
                toPort: 65535,
            }],
        sources: ['10.0.0.0/16', '10.10.0.0/16'],
        protocols: [10, 11],
        tcpFlags: [{ flags: ['ECE', 'SYN'], masks: ['SYN', 'ECE'] }],
    });
    // THEN
    expect(statelessrule.resource).toStrictEqual({
        matchAttributes: {
            destinationPorts: [
                {
                    fromPort: 80,
                    toPort: 80,
                },
                {
                    fromPort: 443,
                    toPort: 443,
                },
            ],
            destinations: [
                { addressDefinition: '10.0.0.0/16, 10.10.0.0/16' },
            ],
            sourcePorts: [{
                    fromPort: 0,
                    toPort: 65535,
                }],
            sources: [
                { addressDefinition: '10.0.0.0/16' },
                { addressDefinition: '10.10.0.0/16' },
            ],
            protocols: [10, 11],
            tcpFlags: [{ flags: ['ECE', 'SYN'], masks: ['SYN', 'ECE'] }],
        },
        actions: ['aws:drop', 'customAction'],
    });
    expect(statelessrule.calculateCapacity()).toBe(16);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVsZXNzcnVsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdGVsZXNzcnVsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQTJEO0FBQzNELG9EQUFvRDtBQUNwRCwwQ0FBMEM7QUFDMUMsZ0NBQWdDO0FBRWhDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNLGFBQWEsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDNUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQztLQUM5QyxDQUFDLENBQUM7SUFDSCxPQUFPO0lBQ1AsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDM0MsZUFBZSxFQUFFO1lBQ2YsZ0JBQWdCLEVBQUUsU0FBUztZQUMzQixZQUFZLEVBQUUsRUFBRTtZQUNoQixTQUFTLEVBQUUsU0FBUztZQUNwQixXQUFXLEVBQUUsU0FBUztZQUN0QixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxTQUFTO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDO0tBQ3RCLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDNUIsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNLGFBQWEsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDNUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxjQUFjLENBQUM7UUFDN0QsZ0JBQWdCLEVBQUU7WUFDaEI7Z0JBQ0UsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osTUFBTSxFQUFFLEVBQUU7YUFDWDtZQUNEO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxHQUFHO2FBQ1o7U0FDRjtRQUNELFlBQVksRUFBRSxDQUFDLDJCQUEyQixDQUFDO1FBQzNDLFdBQVcsRUFBRSxDQUFDO2dCQUNaLFFBQVEsRUFBRSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxLQUFLO2FBQ2QsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUM7UUFDeEMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNuQixRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztLQUM3RCxDQUFDLENBQUM7SUFDSCxPQUFPO0lBQ1AsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDM0MsZUFBZSxFQUFFO1lBQ2YsZ0JBQWdCLEVBQUU7Z0JBQ2hCO29CQUNFLFFBQVEsRUFBRSxFQUFFO29CQUNaLE1BQU0sRUFBRSxFQUFFO2lCQUNYO2dCQUNEO29CQUNFLFFBQVEsRUFBRSxHQUFHO29CQUNiLE1BQU0sRUFBRSxHQUFHO2lCQUNaO2FBQ0Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osRUFBRSxpQkFBaUIsRUFBRSwyQkFBMkIsRUFBRTthQUNuRDtZQUNELFdBQVcsRUFBRSxDQUFDO29CQUNaLFFBQVEsRUFBRSxDQUFDO29CQUNYLE1BQU0sRUFBRSxLQUFLO2lCQUNkLENBQUM7WUFDRixPQUFPLEVBQUU7Z0JBQ1AsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUU7Z0JBQ3BDLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFO2FBQ3RDO1lBQ0QsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNuQixRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztTQUM3RDtRQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUM7S0FDdEMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgeyBUZW1wbGF0ZSwgTWF0Y2ggfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcbi8vaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcbi8vaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliL2NvcmUnO1xuaW1wb3J0ICogYXMgTmV0RlcgZnJvbSAnLi4vbGliJztcblxudGVzdCgnRGVmYXVsdCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAvLyBXSEVOXG4gIGNvbnN0IHN0YXRlbGVzc3J1bGUgPSBuZXcgTmV0RlcuU3RhdGVsZXNzUnVsZSh7XG4gICAgYWN0aW9uczogW05ldEZXLlN0YXRlbGVzc1N0YW5kYXJkQWN0aW9uLkRST1BdLFxuICB9KTtcbiAgLy8gVEhFTlxuICBleHBlY3Qoc3RhdGVsZXNzcnVsZS5yZXNvdXJjZSkudG9TdHJpY3RFcXVhbCh7XG4gICAgbWF0Y2hBdHRyaWJ1dGVzOiB7XG4gICAgICBkZXN0aW5hdGlvblBvcnRzOiB1bmRlZmluZWQsXG4gICAgICBkZXN0aW5hdGlvbnM6IFtdLFxuICAgICAgcHJvdG9jb2xzOiB1bmRlZmluZWQsXG4gICAgICBzb3VyY2VQb3J0czogdW5kZWZpbmVkLFxuICAgICAgc291cmNlczogW10sXG4gICAgICB0Y3BGbGFnczogdW5kZWZpbmVkLFxuICAgIH0sXG4gICAgYWN0aW9uczogWydhd3M6ZHJvcCddLFxuICB9KTtcbiAgZXhwZWN0KHN0YXRlbGVzc3J1bGUuY2FsY3VsYXRlQ2FwYWNpdHkoKSkudG9CZSgxKTtcbn0pO1xuXG50ZXN0KCdHaXZlbiBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAvLyBXSEVOXG4gIGNvbnN0IHN0YXRlbGVzc3J1bGUgPSBuZXcgTmV0RlcuU3RhdGVsZXNzUnVsZSh7XG4gICAgYWN0aW9uczogW05ldEZXLlN0YXRlbGVzc1N0YW5kYXJkQWN0aW9uLkRST1AsICdjdXN0b21BY3Rpb24nXSxcbiAgICBkZXN0aW5hdGlvblBvcnRzOiBbXG4gICAgICB7XG4gICAgICAgIGZyb21Qb3J0OiA4MCxcbiAgICAgICAgdG9Qb3J0OiA4MCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZyb21Qb3J0OiA0NDMsXG4gICAgICAgIHRvUG9ydDogNDQzLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGRlc3RpbmF0aW9uczogWycxMC4wLjAuMC8xNiwgMTAuMTAuMC4wLzE2J10sXG4gICAgc291cmNlUG9ydHM6IFt7XG4gICAgICBmcm9tUG9ydDogMCxcbiAgICAgIHRvUG9ydDogNjU1MzUsXG4gICAgfV0sXG4gICAgc291cmNlczogWycxMC4wLjAuMC8xNicsICcxMC4xMC4wLjAvMTYnXSxcbiAgICBwcm90b2NvbHM6IFsxMCwgMTFdLFxuICAgIHRjcEZsYWdzOiBbeyBmbGFnczogWydFQ0UnLCAnU1lOJ10sIG1hc2tzOiBbJ1NZTicsICdFQ0UnXSB9XSxcbiAgfSk7XG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YXRlbGVzc3J1bGUucmVzb3VyY2UpLnRvU3RyaWN0RXF1YWwoe1xuICAgIG1hdGNoQXR0cmlidXRlczoge1xuICAgICAgZGVzdGluYXRpb25Qb3J0czogW1xuICAgICAgICB7XG4gICAgICAgICAgZnJvbVBvcnQ6IDgwLFxuICAgICAgICAgIHRvUG9ydDogODAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmcm9tUG9ydDogNDQzLFxuICAgICAgICAgIHRvUG9ydDogNDQzLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGRlc3RpbmF0aW9uczogW1xuICAgICAgICB7IGFkZHJlc3NEZWZpbml0aW9uOiAnMTAuMC4wLjAvMTYsIDEwLjEwLjAuMC8xNicgfSxcbiAgICAgIF0sXG4gICAgICBzb3VyY2VQb3J0czogW3tcbiAgICAgICAgZnJvbVBvcnQ6IDAsXG4gICAgICAgIHRvUG9ydDogNjU1MzUsXG4gICAgICB9XSxcbiAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgeyBhZGRyZXNzRGVmaW5pdGlvbjogJzEwLjAuMC4wLzE2JyB9LFxuICAgICAgICB7IGFkZHJlc3NEZWZpbml0aW9uOiAnMTAuMTAuMC4wLzE2JyB9LFxuICAgICAgXSxcbiAgICAgIHByb3RvY29sczogWzEwLCAxMV0sXG4gICAgICB0Y3BGbGFnczogW3sgZmxhZ3M6IFsnRUNFJywgJ1NZTiddLCBtYXNrczogWydTWU4nLCAnRUNFJ10gfV0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBbJ2F3czpkcm9wJywgJ2N1c3RvbUFjdGlvbiddLFxuICB9KTtcblxuICBleHBlY3Qoc3RhdGVsZXNzcnVsZS5jYWxjdWxhdGVDYXBhY2l0eSgpKS50b0JlKDE2KTtcbn0pO1xuIl19