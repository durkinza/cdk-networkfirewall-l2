"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//import { Template, Match } from 'aws-cdk-lib/assertions';
const assertions_1 = require("aws-cdk-lib/assertions");
const cdk = require("aws-cdk-lib/core");
const NetFW = require("../lib");
/**
 * Tests for 5 Tuple Stateful rule groups
 */
test('Default properties on 5Tuple Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new NetFW.Stateful5TupleRuleGroup(stack, 'MyStateful5TupleRuleGroup');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStateful5TupleRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RulesSource: {},
            StatefulRuleOptions: {
                RuleOrder: 'DEFAULT_ACTION_ORDER',
            },
        },
    });
});
test('Given properties on 5Tuple Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const stateful5TupleRule1 = new NetFW.Stateful5TupleRule({
        action: NetFW.StatefulStandardAction.DROP,
    });
    const stateful5TupleRule2 = new NetFW.Stateful5TupleRule({
        action: NetFW.StatefulStandardAction.PASS,
    });
    // WHEN
    new NetFW.Stateful5TupleRuleGroup(stack, 'MyStateful5TupleRuleGroup', {
        ruleGroupName: 'MyStatefulRuleGroup',
        capacity: 100,
        rules: [stateful5TupleRule1, stateful5TupleRule2],
        variables: {
            ipSets: {
                ipSetsKey: { definition: ['10.0.0.0/16', '10.10.0.0/16'] },
            },
            portSets: {
                portSetsKey: { definition: ['443', '80'] },
            },
        },
        ruleOrder: NetFW.StatefulRuleOptions.STRICT_ORDER,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStatefulRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RuleVariables: {
                IPSets: {
                    ipSetsKey: {
                        Definition: ['10.0.0.0/16', '10.10.0.0/16'],
                    },
                },
                PortSets: {
                    portSetsKey: { Definition: ['443', '80'] },
                },
            },
            RulesSource: {
                StatefulRules: [
                    {
                        Action: 'DROP',
                        Header: {
                            Destination: 'ANY',
                            DestinationPort: 'ANY',
                            Direction: 'ANY',
                            Protocol: 'IP',
                            Source: 'ANY',
                            SourcePort: 'ANY',
                        },
                        RuleOptions: [],
                    },
                    {
                        Action: 'PASS',
                        Header: {
                            Destination: 'ANY',
                            DestinationPort: 'ANY',
                            Direction: 'ANY',
                            Protocol: 'IP',
                            Source: 'ANY',
                            SourcePort: 'ANY',
                        },
                        RuleOptions: [],
                    },
                ],
            },
            StatefulRuleOptions: {
                RuleOrder: 'STRICT_ORDER',
            },
        },
    });
});
/**
 *  Tests Domain List stateful rules
 */
test('Default properties on Domain List Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new NetFW.StatefulDomainListRuleGroup(stack, 'MyStatefulDomainListRuleGroup');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStatefulDomainListRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RulesSource: {},
            StatefulRuleOptions: {
                RuleOrder: 'DEFAULT_ACTION_ORDER',
            },
        },
    });
});
test('Given properties on Domain List Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const statefulDomainListRule = new NetFW.StatefulDomainListRule({
        type: NetFW.StatefulDomainListType.DENYLIST,
        targets: ['example.com'],
        targetTypes: [NetFW.StatefulDomainListTargetType.HTTP_HOST],
    });
    // WHEN
    new NetFW.StatefulDomainListRuleGroup(stack, 'MyStatefulDomainListRuleGroup', {
        capacity: 100,
        ruleGroupName: 'MyStatefulRuleGroup',
        rule: statefulDomainListRule,
        variables: {
            ipSets: {
                ipSetsKey: { definition: ['10.0.0.0/16', '10.10.0.0/16'] },
            },
            portSets: {
                portSetsKey: { definition: ['443', '80'] },
            },
        },
        ruleOrder: NetFW.StatefulRuleOptions.STRICT_ORDER,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStatefulRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RuleVariables: {
                IPSets: {
                    ipSetsKey: {
                        Definition: ['10.0.0.0/16', '10.10.0.0/16'],
                    },
                },
                PortSets: {
                    portSetsKey: { Definition: ['443', '80'] },
                },
            },
            RulesSource: {
                RulesSourceList: {
                    GeneratedRulesType: 'DENYLIST',
                    TargetTypes: [
                        'HTTP_HOST',
                    ],
                    Targets: [
                        'example.com',
                    ],
                },
            },
            StatefulRuleOptions: {
                RuleOrder: 'STRICT_ORDER',
            },
        },
    });
});
/**
 * Tests for Suricata rule groups
 */
test('Default properties on Suricata Rule Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new NetFW.StatefulSuricataRuleGroup(stack, 'MyStatefulSuricataRuleGroup');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStatefulSuricataRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RulesSource: {},
            StatefulRuleOptions: {
                RuleOrder: 'DEFAULT_ACTION_ORDER',
            },
        },
    });
});
test('Given properties on Suricata Rule Group', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new NetFW.StatefulSuricataRuleGroup(stack, 'MyStatefulSuricataRuleGroup', {
        capacity: 100,
        ruleGroupName: 'MyStatefulRuleGroup',
        rules: 'drop tcp $HOME_NET any -> $EXTERNAL_NET any (msg:"ET TROJAN Likely Bot Nick in IRC (USA +..)"; flow:established,to_server; flowbits:isset,is_proto_irc; content:"NICK "; pcre:"/NICK .*USA.*[0-9]{3,}/i"; reference:url,doc.emergingthreats.net/2008124; classtype:trojan-activity; sid:2008124; rev:2;)',
        variables: {
            ipSets: {
                ipSetsKey: { definition: ['10.0.0.0/16', '10.10.0.0/16'] },
            },
            portSets: {
                portSetsKey: { definition: ['443', '80'] },
            },
        },
        ruleOrder: NetFW.StatefulRuleOptions.STRICT_ORDER,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::NetworkFirewall::RuleGroup', {
        Capacity: 100,
        RuleGroupName: 'MyStatefulRuleGroup',
        Type: 'STATEFUL',
        RuleGroup: {
            RuleVariables: {
                IPSets: {
                    ipSetsKey: {
                        Definition: ['10.0.0.0/16', '10.10.0.0/16'],
                    },
                },
                PortSets: {
                    portSetsKey: { Definition: ['443', '80'] },
                },
            },
            RulesSource: {
                RulesString: 'drop tcp $HOME_NET any -> $EXTERNAL_NET any (msg:\"ET TROJAN Likely Bot Nick in IRC (USA +..)\"; flow:established,to_server; flowbits:isset,is_proto_irc; content:\"NICK \"; pcre:\"/NICK .*USA.*[0-9]{3,}/i\"; reference:url,doc.emergingthreats.net/2008124; classtype:trojan-activity; sid:2008124; rev:2;)',
            },
            StatefulRuleOptions: {
                RuleOrder: 'STRICT_ORDER',
            },
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVmdWxydWxlZ3JvdXAudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0YXRlZnVscnVsZWdyb3VwLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFDM0QsdURBQWtEO0FBQ2xELHdDQUF3QztBQUN4QyxnQ0FBZ0M7QUFFaEM7O0dBRUc7QUFDSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO0lBQzlDLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixPQUFPO0lBQ1AsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDdEUsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGlDQUFpQyxFQUFFO1FBQ2pGLFFBQVEsRUFBRSxHQUFHO1FBQ2IsYUFBYSxFQUFFLDJCQUEyQjtRQUMxQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixTQUFTLEVBQUU7WUFDVCxXQUFXLEVBQUUsRUFBRTtZQUNmLG1CQUFtQixFQUFFO2dCQUNuQixTQUFTLEVBQUUsc0JBQXNCO2FBQ2xDO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDNUMsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUM7UUFDdkQsTUFBTSxFQUFFLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJO0tBQzFDLENBQUMsQ0FBQztJQUNILE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUM7UUFDdkQsTUFBTSxFQUFFLEtBQUss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QVEsRUFBRSxHQUFHO1FBQ2IsYUFBYSxFQUFFLHFCQUFxQjtRQUNwQyxLQUFLLEVBQUUsMFNBQTBTO1FBQ2pULFNBQVMsRUFBRTtZQUNULE1BQU0sRUFBRTtnQkFDTixTQUFTLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLEVBQUU7YUFDM0Q7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsV0FBVyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFO2FBQzNDO1NBQ0Y7UUFDRCxTQUFTLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFlBQVk7S0FDbEQsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGlDQUFpQyxFQUFFO1FBQ2pGLFFBQVEsRUFBRSxHQUFHO1FBQ2IsYUFBYSxFQUFFLHFCQUFxQjtRQUNwQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixTQUFTLEVBQUU7WUFDVCxhQUFhLEVBQUU7Z0JBQ2IsTUFBTSxFQUFFO29CQUNOLFNBQVMsRUFBRTt3QkFDVCxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDO3FCQUM1QztpQkFDRjtnQkFDRCxRQUFRLEVBQUU7b0JBQ1IsV0FBVyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFO2lCQUMzQzthQUNGO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLFdBQVcsRUFBRSxnVEFBZ1Q7YUFDOVQ7WUFDRCxtQkFBbUIsRUFBRTtnQkFDbkIsU0FBUyxFQUFFLGNBQWM7YUFDMUI7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgeyBUZW1wbGF0ZSwgTWF0Y2ggfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWIvY29yZSc7XG5pbXBvcnQgKiBhcyBOZXRGVyBmcm9tICcuLi9saWInO1xuXG4vKipcbiAqIFRlc3RzIGZvciA1IFR1cGxlIFN0YXRlZnVsIHJ1bGUgZ3JvdXBzXG4gKi9cbnRlc3QoJ0RlZmF1bHQgcHJvcGVydGllcyBvbiA1VHVwbGUgR3JvdXAnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAvLyBXSEVOXG4gIG5ldyBOZXRGVy5TdGF0ZWZ1bDVUdXBsZVJ1bGVHcm91cChzdGFjaywgJ015U3RhdGVmdWw1VHVwbGVSdWxlR3JvdXAnKTtcbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpOZXR3b3JrRmlyZXdhbGw6OlJ1bGVHcm91cCcsIHtcbiAgICBDYXBhY2l0eTogMTAwLFxuICAgIFJ1bGVHcm91cE5hbWU6ICdNeVN0YXRlZnVsNVR1cGxlUnVsZUdyb3VwJyxcbiAgICBUeXBlOiAnU1RBVEVGVUwnLFxuICAgIFJ1bGVHcm91cDoge1xuICAgICAgUnVsZXNTb3VyY2U6IHt9LFxuICAgICAgU3RhdGVmdWxSdWxlT3B0aW9uczoge1xuICAgICAgICBSdWxlT3JkZXI6ICdERUZBVUxUX0FDVElPTl9PUkRFUicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0dpdmVuIHByb3BlcnRpZXMgb24gNVR1cGxlIEdyb3VwJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3Qgc3RhdGVmdWw1VHVwbGVSdWxlMSA9IG5ldyBOZXRGVy5TdGF0ZWZ1bDVUdXBsZVJ1bGUoe1xuICAgIGFjdGlvbjogTmV0RlcuU3RhdGVmdWxTdGFuZGFyZEFjdGlvbi5EUk9QLFxuICB9KTtcbiAgY29uc3Qgc3RhdGVmdWw1VHVwbGVSdWxlMiA9IG5ldyBOZXRGVy5TdGF0ZWZ1bDVUdXBsZVJ1bGUoe1xuICAgIGFjdGlvbjogTmV0RlcuU3RhdGVmdWxTdGFuZGFyZEFjdGlvbi5QQVNTLFxuICB9KTtcbiAgLy8gV0hFTlxuICBuZXcgTmV0RlcuU3RhdGVmdWw1VHVwbGVSdWxlR3JvdXAoc3RhY2ssICdNeVN0YXRlZnVsNVR1cGxlUnVsZUdyb3VwJywge1xuICAgIHJ1bGVHcm91cE5hbWU6ICdNeVN0YXRlZnVsUnVsZUdyb3VwJyxcbiAgICBjYXBhY2l0eTogMTAwLFxuICAgIHJ1bGVzOiBbc3RhdGVmdWw1VHVwbGVSdWxlMSwgc3RhdGVmdWw1VHVwbGVSdWxlMl0sXG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpcFNldHM6IHtcbiAgICAgICAgaXBTZXRzS2V5OiB7IGRlZmluaXRpb246IFsnMTAuMC4wLjAvMTYnLCAnMTAuMTAuMC4wLzE2J10gfSxcbiAgICAgIH0sXG4gICAgICBwb3J0U2V0czoge1xuICAgICAgICBwb3J0U2V0c0tleTogeyBkZWZpbml0aW9uOiBbJzQ0MycsICc4MCddIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgcnVsZU9yZGVyOiBOZXRGVy5TdGF0ZWZ1bFJ1bGVPcHRpb25zLlNUUklDVF9PUkRFUixcbiAgfSk7XG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TmV0d29ya0ZpcmV3YWxsOjpSdWxlR3JvdXAnLCB7XG4gICAgQ2FwYWNpdHk6IDEwMCxcbiAgICBSdWxlR3JvdXBOYW1lOiAnTXlTdGF0ZWZ1bFJ1bGVHcm91cCcsXG4gICAgVHlwZTogJ1NUQVRFRlVMJyxcbiAgICBSdWxlR3JvdXA6IHtcbiAgICAgIFJ1bGVWYXJpYWJsZXM6IHtcbiAgICAgICAgSVBTZXRzOiB7XG4gICAgICAgICAgaXBTZXRzS2V5OiB7XG4gICAgICAgICAgICBEZWZpbml0aW9uOiBbJzEwLjAuMC4wLzE2JywgJzEwLjEwLjAuMC8xNiddLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFBvcnRTZXRzOiB7XG4gICAgICAgICAgcG9ydFNldHNLZXk6IHsgRGVmaW5pdGlvbjogWyc0NDMnLCAnODAnXSB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFJ1bGVzU291cmNlOiB7XG4gICAgICAgIFN0YXRlZnVsUnVsZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBBY3Rpb246ICdEUk9QJyxcbiAgICAgICAgICAgIEhlYWRlcjoge1xuICAgICAgICAgICAgICBEZXN0aW5hdGlvbjogJ0FOWScsXG4gICAgICAgICAgICAgIERlc3RpbmF0aW9uUG9ydDogJ0FOWScsXG4gICAgICAgICAgICAgIERpcmVjdGlvbjogJ0FOWScsXG4gICAgICAgICAgICAgIFByb3RvY29sOiAnSVAnLFxuICAgICAgICAgICAgICBTb3VyY2U6ICdBTlknLFxuICAgICAgICAgICAgICBTb3VyY2VQb3J0OiAnQU5ZJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSdWxlT3B0aW9uczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBBY3Rpb246ICdQQVNTJyxcbiAgICAgICAgICAgIEhlYWRlcjoge1xuICAgICAgICAgICAgICBEZXN0aW5hdGlvbjogJ0FOWScsXG4gICAgICAgICAgICAgIERlc3RpbmF0aW9uUG9ydDogJ0FOWScsXG4gICAgICAgICAgICAgIERpcmVjdGlvbjogJ0FOWScsXG4gICAgICAgICAgICAgIFByb3RvY29sOiAnSVAnLFxuICAgICAgICAgICAgICBTb3VyY2U6ICdBTlknLFxuICAgICAgICAgICAgICBTb3VyY2VQb3J0OiAnQU5ZJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSdWxlT3B0aW9uczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBTdGF0ZWZ1bFJ1bGVPcHRpb25zOiB7XG4gICAgICAgIFJ1bGVPcmRlcjogJ1NUUklDVF9PUkRFUicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbi8qKlxuICogIFRlc3RzIERvbWFpbiBMaXN0IHN0YXRlZnVsIHJ1bGVzXG4gKi9cblxudGVzdCgnRGVmYXVsdCBwcm9wZXJ0aWVzIG9uIERvbWFpbiBMaXN0IEdyb3VwJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgLy8gV0hFTlxuICBuZXcgTmV0RlcuU3RhdGVmdWxEb21haW5MaXN0UnVsZUdyb3VwKHN0YWNrLCAnTXlTdGF0ZWZ1bERvbWFpbkxpc3RSdWxlR3JvdXAnKTtcbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpOZXR3b3JrRmlyZXdhbGw6OlJ1bGVHcm91cCcsIHtcbiAgICBDYXBhY2l0eTogMTAwLFxuICAgIFJ1bGVHcm91cE5hbWU6ICdNeVN0YXRlZnVsRG9tYWluTGlzdFJ1bGVHcm91cCcsXG4gICAgVHlwZTogJ1NUQVRFRlVMJyxcbiAgICBSdWxlR3JvdXA6IHtcbiAgICAgIFJ1bGVzU291cmNlOiB7fSxcbiAgICAgIFN0YXRlZnVsUnVsZU9wdGlvbnM6IHtcbiAgICAgICAgUnVsZU9yZGVyOiAnREVGQVVMVF9BQ1RJT05fT1JERVInLFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdHaXZlbiBwcm9wZXJ0aWVzIG9uIERvbWFpbiBMaXN0IEdyb3VwJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3Qgc3RhdGVmdWxEb21haW5MaXN0UnVsZSA9IG5ldyBOZXRGVy5TdGF0ZWZ1bERvbWFpbkxpc3RSdWxlKHtcbiAgICB0eXBlOiBOZXRGVy5TdGF0ZWZ1bERvbWFpbkxpc3RUeXBlLkRFTllMSVNULFxuICAgIHRhcmdldHM6IFsnZXhhbXBsZS5jb20nXSxcbiAgICB0YXJnZXRUeXBlczogW05ldEZXLlN0YXRlZnVsRG9tYWluTGlzdFRhcmdldFR5cGUuSFRUUF9IT1NUXSxcbiAgfSk7XG4gIC8vIFdIRU5cbiAgbmV3IE5ldEZXLlN0YXRlZnVsRG9tYWluTGlzdFJ1bGVHcm91cChzdGFjaywgJ015U3RhdGVmdWxEb21haW5MaXN0UnVsZUdyb3VwJywge1xuICAgIGNhcGFjaXR5OiAxMDAsXG4gICAgcnVsZUdyb3VwTmFtZTogJ015U3RhdGVmdWxSdWxlR3JvdXAnLFxuICAgIHJ1bGU6IHN0YXRlZnVsRG9tYWluTGlzdFJ1bGUsXG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpcFNldHM6IHtcbiAgICAgICAgaXBTZXRzS2V5OiB7IGRlZmluaXRpb246IFsnMTAuMC4wLjAvMTYnLCAnMTAuMTAuMC4wLzE2J10gfSxcbiAgICAgIH0sXG4gICAgICBwb3J0U2V0czoge1xuICAgICAgICBwb3J0U2V0c0tleTogeyBkZWZpbml0aW9uOiBbJzQ0MycsICc4MCddIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgcnVsZU9yZGVyOiBOZXRGVy5TdGF0ZWZ1bFJ1bGVPcHRpb25zLlNUUklDVF9PUkRFUixcbiAgfSk7XG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TmV0d29ya0ZpcmV3YWxsOjpSdWxlR3JvdXAnLCB7XG4gICAgQ2FwYWNpdHk6IDEwMCxcbiAgICBSdWxlR3JvdXBOYW1lOiAnTXlTdGF0ZWZ1bFJ1bGVHcm91cCcsXG4gICAgVHlwZTogJ1NUQVRFRlVMJyxcbiAgICBSdWxlR3JvdXA6IHtcbiAgICAgIFJ1bGVWYXJpYWJsZXM6IHtcbiAgICAgICAgSVBTZXRzOiB7XG4gICAgICAgICAgaXBTZXRzS2V5OiB7XG4gICAgICAgICAgICBEZWZpbml0aW9uOiBbJzEwLjAuMC4wLzE2JywgJzEwLjEwLjAuMC8xNiddLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFBvcnRTZXRzOiB7XG4gICAgICAgICAgcG9ydFNldHNLZXk6IHsgRGVmaW5pdGlvbjogWyc0NDMnLCAnODAnXSB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFJ1bGVzU291cmNlOiB7XG4gICAgICAgIFJ1bGVzU291cmNlTGlzdDoge1xuICAgICAgICAgIEdlbmVyYXRlZFJ1bGVzVHlwZTogJ0RFTllMSVNUJyxcbiAgICAgICAgICBUYXJnZXRUeXBlczogW1xuICAgICAgICAgICAgJ0hUVFBfSE9TVCcsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBUYXJnZXRzOiBbXG4gICAgICAgICAgICAnZXhhbXBsZS5jb20nLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgU3RhdGVmdWxSdWxlT3B0aW9uczoge1xuICAgICAgICBSdWxlT3JkZXI6ICdTVFJJQ1RfT1JERVInLFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG4vKipcbiAqIFRlc3RzIGZvciBTdXJpY2F0YSBydWxlIGdyb3Vwc1xuICovXG5cbnRlc3QoJ0RlZmF1bHQgcHJvcGVydGllcyBvbiBTdXJpY2F0YSBSdWxlIEdyb3VwJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgLy8gV0hFTlxuICBuZXcgTmV0RlcuU3RhdGVmdWxTdXJpY2F0YVJ1bGVHcm91cChzdGFjaywgJ015U3RhdGVmdWxTdXJpY2F0YVJ1bGVHcm91cCcpO1xuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6Ok5ldHdvcmtGaXJld2FsbDo6UnVsZUdyb3VwJywge1xuICAgIENhcGFjaXR5OiAxMDAsXG4gICAgUnVsZUdyb3VwTmFtZTogJ015U3RhdGVmdWxTdXJpY2F0YVJ1bGVHcm91cCcsXG4gICAgVHlwZTogJ1NUQVRFRlVMJyxcbiAgICBSdWxlR3JvdXA6IHtcbiAgICAgIFJ1bGVzU291cmNlOiB7fSxcbiAgICAgIFN0YXRlZnVsUnVsZU9wdGlvbnM6IHtcbiAgICAgICAgUnVsZU9yZGVyOiAnREVGQVVMVF9BQ1RJT05fT1JERVInLFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdHaXZlbiBwcm9wZXJ0aWVzIG9uIFN1cmljYXRhIFJ1bGUgR3JvdXAnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAvLyBXSEVOXG4gIG5ldyBOZXRGVy5TdGF0ZWZ1bFN1cmljYXRhUnVsZUdyb3VwKHN0YWNrLCAnTXlTdGF0ZWZ1bFN1cmljYXRhUnVsZUdyb3VwJywge1xuICAgIGNhcGFjaXR5OiAxMDAsXG4gICAgcnVsZUdyb3VwTmFtZTogJ015U3RhdGVmdWxSdWxlR3JvdXAnLFxuICAgIHJ1bGVzOiAnZHJvcCB0Y3AgJEhPTUVfTkVUIGFueSAtPiAkRVhURVJOQUxfTkVUIGFueSAobXNnOlwiRVQgVFJPSkFOIExpa2VseSBCb3QgTmljayBpbiBJUkMgKFVTQSArLi4pXCI7IGZsb3c6ZXN0YWJsaXNoZWQsdG9fc2VydmVyOyBmbG93Yml0czppc3NldCxpc19wcm90b19pcmM7IGNvbnRlbnQ6XCJOSUNLIFwiOyBwY3JlOlwiL05JQ0sgLipVU0EuKlswLTldezMsfS9pXCI7IHJlZmVyZW5jZTp1cmwsZG9jLmVtZXJnaW5ndGhyZWF0cy5uZXQvMjAwODEyNDsgY2xhc3N0eXBlOnRyb2phbi1hY3Rpdml0eTsgc2lkOjIwMDgxMjQ7IHJldjoyOyknLFxuICAgIHZhcmlhYmxlczoge1xuICAgICAgaXBTZXRzOiB7XG4gICAgICAgIGlwU2V0c0tleTogeyBkZWZpbml0aW9uOiBbJzEwLjAuMC4wLzE2JywgJzEwLjEwLjAuMC8xNiddIH0sXG4gICAgICB9LFxuICAgICAgcG9ydFNldHM6IHtcbiAgICAgICAgcG9ydFNldHNLZXk6IHsgZGVmaW5pdGlvbjogWyc0NDMnLCAnODAnXSB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHJ1bGVPcmRlcjogTmV0RlcuU3RhdGVmdWxSdWxlT3B0aW9ucy5TVFJJQ1RfT1JERVIsXG4gIH0pO1xuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6Ok5ldHdvcmtGaXJld2FsbDo6UnVsZUdyb3VwJywge1xuICAgIENhcGFjaXR5OiAxMDAsXG4gICAgUnVsZUdyb3VwTmFtZTogJ015U3RhdGVmdWxSdWxlR3JvdXAnLFxuICAgIFR5cGU6ICdTVEFURUZVTCcsXG4gICAgUnVsZUdyb3VwOiB7XG4gICAgICBSdWxlVmFyaWFibGVzOiB7XG4gICAgICAgIElQU2V0czoge1xuICAgICAgICAgIGlwU2V0c0tleToge1xuICAgICAgICAgICAgRGVmaW5pdGlvbjogWycxMC4wLjAuMC8xNicsICcxMC4xMC4wLjAvMTYnXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBQb3J0U2V0czoge1xuICAgICAgICAgIHBvcnRTZXRzS2V5OiB7IERlZmluaXRpb246IFsnNDQzJywgJzgwJ10gfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBSdWxlc1NvdXJjZToge1xuICAgICAgICBSdWxlc1N0cmluZzogJ2Ryb3AgdGNwICRIT01FX05FVCBhbnkgLT4gJEVYVEVSTkFMX05FVCBhbnkgKG1zZzpcXFwiRVQgVFJPSkFOIExpa2VseSBCb3QgTmljayBpbiBJUkMgKFVTQSArLi4pXFxcIjsgZmxvdzplc3RhYmxpc2hlZCx0b19zZXJ2ZXI7IGZsb3diaXRzOmlzc2V0LGlzX3Byb3RvX2lyYzsgY29udGVudDpcXFwiTklDSyBcXFwiOyBwY3JlOlxcXCIvTklDSyAuKlVTQS4qWzAtOV17Myx9L2lcXFwiOyByZWZlcmVuY2U6dXJsLGRvYy5lbWVyZ2luZ3RocmVhdHMubmV0LzIwMDgxMjQ7IGNsYXNzdHlwZTp0cm9qYW4tYWN0aXZpdHk7IHNpZDoyMDA4MTI0OyByZXY6MjspJyxcbiAgICAgIH0sXG4gICAgICBTdGF0ZWZ1bFJ1bGVPcHRpb25zOiB7XG4gICAgICAgIFJ1bGVPcmRlcjogJ1NUUklDVF9PUkRFUicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG4iXX0=