"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatefulDomainListRule = exports.StatefulDomainListTargetType = exports.StatefulDomainListType = exports.Stateful5TupleRule = exports.StatefulRuleBase = exports.Stateful5TupleDirection = exports.StatelessRule = void 0;
const actions_1 = require("./actions");
const rules_common_1 = require("./private/rules-common");
/**
 * The base class of Stateless Rules
 */
class StatelessRuleBase {
}
/**
 * Defines a Network Firewall Stateless Rule
 */
class StatelessRule extends StatelessRuleBase {
    constructor(props) {
        super();
        // Adding Validations
        /**
         * Validating Actions
         */
        // Ensure only one standard action is provided.
        let standard_action_provided = false;
        let action;
        for (action of props.actions) {
            if (Object.values(actions_1.StatelessStandardAction).includes(action)) {
                if (standard_action_provided) {
                    throw new Error('Only one standard action can be provided, all other actions must be custom');
                }
                standard_action_provided = true;
            }
        }
        /**
         * Saving to object for furture capacity calculations.
         * Capacity can't be calculated yes since props can be updated
         */
        this.destinations = props.destinations || [];
        this.destinationPorts = props.destinationPorts || [];
        this.sources = props.sources || [];
        this.sourcePorts = props.sourcePorts || [];
        this.protocols = props.protocols || [];
        const destinations = (0, rules_common_1.castAddressProperty)(props.destinations);
        const sources = (0, rules_common_1.castAddressProperty)(props.sources);
        const ruleMatchAttributes = {
            destinationPorts: props.destinationPorts,
            destinations: destinations,
            sourcePorts: props.sourcePorts,
            sources: sources,
            protocols: props.protocols,
            tcpFlags: props.tcpFlags,
        };
        const ruleDefinition = {
            actions: props.actions,
            matchAttributes: ruleMatchAttributes,
        };
        this.resource = ruleDefinition;
    }
    /**
     * Calculate the address capacity requirements by number of address ranges.
     */
    calculateAddressCapacity(locations) {
        var capacity = 0;
        var cidrs;
        if (locations !== undefined) {
            for (cidrs of locations) {
                capacity += cidrs.split(',').length;
            }
        }
        // always return at least 1, for an undefined set meaning "ANY"
        return capacity || 1;
    }
    /**
     * Calculate Rule Capacity Reqirements.
     * https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-group-managing.html#nwfw-rule-group-capacity
     */
    calculateCapacity() {
        let capacity = 1;
        capacity *= this.calculateAddressCapacity(this.destinations);
        capacity *= this.destinationPorts.length || 1;
        capacity *= this.calculateAddressCapacity(this.sources);
        capacity *= this.sourcePorts.length || 1;
        capacity *= this.protocols.length || 1;
        return capacity;
    }
}
exports.StatelessRule = StatelessRule;
/**
 * The direction of traffic flow to inspect.
 */
var Stateful5TupleDirection;
(function (Stateful5TupleDirection) {
    /**
     * Inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source.
     */
    Stateful5TupleDirection["ANY"] = "ANY";
    /**
     * Inspection only matches traffic going from the source to the destination.
     */
    Stateful5TupleDirection["FORWARD"] = "FORWARD";
})(Stateful5TupleDirection || (exports.Stateful5TupleDirection = Stateful5TupleDirection = {}));
/**
 * The shared base class of stateful rules.
 */
class StatefulRuleBase {
}
exports.StatefulRuleBase = StatefulRuleBase;
/**
 * Generates a Stateful Rule from a 5 Tuple
 */
class Stateful5TupleRule extends StatefulRuleBase {
    constructor(props) {
        super();
        const protocol = props.protocol || 'IP';
        const destination = props.destination || 'ANY';
        const destinationPort = props.destinationPort || 'ANY';
        const source = props.source || 'ANY';
        const sourcePort = props.sourcePort || 'ANY';
        const direction = props.direction || Stateful5TupleDirection.ANY;
        const resourceHeader = {
            destination: destination,
            destinationPort: destinationPort,
            source: source,
            sourcePort: sourcePort,
            protocol: protocol,
            direction: direction,
        };
        const resourceOptions = props.ruleOptions || [];
        const resource = {
            action: props.action,
            header: resourceHeader,
            ruleOptions: resourceOptions,
        };
        this.resource = resource;
    }
}
exports.Stateful5TupleRule = Stateful5TupleRule;
/**
 * The type of domain list to generate
 */
var StatefulDomainListType;
(function (StatefulDomainListType) {
    /**
     * Deny domain(s) through
     */
    StatefulDomainListType["DENYLIST"] = "DENYLIST";
    /**
     * Allow domain(s) through
     */
    StatefulDomainListType["ALLOWLIST"] = "ALLOWLIST";
})(StatefulDomainListType || (exports.StatefulDomainListType = StatefulDomainListType = {}));
/**
 * The types of targets to inspect for.
 *  You can inspect HTTP or HTTPS protocols, or both.
 */
var StatefulDomainListTargetType;
(function (StatefulDomainListTargetType) {
    /**
     * Target HTTPS traffic
     * For HTTPS traffic, Network Firewall uses the Server Name Indication (SNI) extension in the TLS handshake to determine the hostname, or domain name, that the client is trying to connect to
     */
    StatefulDomainListTargetType["TLS_SNI"] = "TLS_SNI";
    /**
     * Target HTTP traffic
     */
    StatefulDomainListTargetType["HTTP_HOST"] = "HTTP_HOST";
})(StatefulDomainListTargetType || (exports.StatefulDomainListTargetType = StatefulDomainListTargetType = {}));
/**
 * Generates a Statful Rule from a Domain List
 */
class StatefulDomainListRule extends StatefulRuleBase {
    constructor(props) {
        super();
        const resource = {
            generatedRulesType: props.type,
            targets: props.targets,
            targetTypes: props.targetTypes,
        };
        this.resource = resource;
    }
}
exports.StatefulDomainListRule = StatefulDomainListRule;
//# sourceMappingURL=data:application/json;base64,