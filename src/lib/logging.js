"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingConfiguration = exports.CloudWatchLogLocation = exports.KinesisDataFirehoseLogLocation = exports.S3LogLocation = exports.LogLocationBase = exports.LogDestinationType = exports.LogType = void 0;
const aws_networkfirewall_1 = require("aws-cdk-lib/aws-networkfirewall");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const core = require("aws-cdk-lib/core");
/**
 * The type of log to send.
 */
var LogType;
(function (LogType) {
    /**
     * Alert logs report traffic that matches a stateful rule with an action setting that sends an alert log message.
     */
    LogType["ALERT"] = "ALERT";
    /**
     * Flow logs are standard network traffic flow logs.
     */
    LogType["FLOW"] = "FLOW";
})(LogType || (exports.LogType = LogType = {}));
;
/**
 * The type of storage destination to send these logs to.
 */
var LogDestinationType;
(function (LogDestinationType) {
    /**
    * Store logs to CloudWatch log group.
    */
    LogDestinationType["CLOUDWATCH"] = "CloudWatchLogs";
    /**
     * Store logs to a Kinesis Data Firehose delivery stream.
     */
    LogDestinationType["KINESISDATAFIREHOSE"] = "KinesisDataFirehose";
    /**
     * Store logs to an S3 bucket.
     */
    LogDestinationType["S3"] = "S3";
})(LogDestinationType || (exports.LogDestinationType = LogDestinationType = {}));
;
;
;
/**
 * Base Log Location class
 */
class LogLocationBase {
    constructor(logDestinationType, props) {
        this.logType = props.logType;
        this.logDestinationType = logDestinationType;
    }
}
exports.LogLocationBase = LogLocationBase;
;
;
/**
 * Defines a S3 Bucket Logging configuration.
 */
class S3LogLocation extends LogLocationBase {
    constructor(props) {
        super(LogDestinationType.S3, props);
        this.logDestinationType = LogDestinationType.S3;
        this.logType = props.logType;
        // Throws and error if bucketName is invalid format.
        aws_s3_1.Bucket.validateBucketName(props.bucketName);
        if (props.prefix) {
            if (!/^[a-zA-Z0-9_.!*'()-]{1,}$/.test(props.prefix)) {
                throw new Error(`'prefix' must have only letters, numbers, hyphens, dots (.), underscores, parantheses, stars(*), and explaination points (!). Got: ${props.prefix}`);
            }
            this.logDestination = {
                bucketName: props.bucketName,
                prefix: props.prefix,
            };
        }
        else {
            this.logDestination = {
                bucketName: props.bucketName,
            };
        }
    }
}
exports.S3LogLocation = S3LogLocation;
;
;
/**
 * Defines a Kinesis Delivery Stream Logging Configuration.
 */
class KinesisDataFirehoseLogLocation extends LogLocationBase {
    constructor(props) {
        super(LogDestinationType.KINESISDATAFIREHOSE, props);
        this.logDestinationType = LogDestinationType.KINESISDATAFIREHOSE;
        this.logType = props.logType;
        // Throws and error if deliveryStream is invalid format.
        // skip validation for late-bound values.
        if (!core.Token.isUnresolved(props.deliveryStream)) {
            if (!/^[a-zA-Z0-9_.-]{1,64}$/.test(props.deliveryStream)) {
                // Throws and error if logGroup is invalid format.
                throw new Error(`'LogGroup' must have 1-64 characters of only letters, numbers, hyphens, dots (.), and underscores. Got: ${props.deliveryStream}`);
            }
        }
        this.logDestination = {
            deliveryStream: props.deliveryStream,
        };
    }
}
exports.KinesisDataFirehoseLogLocation = KinesisDataFirehoseLogLocation;
;
;
/**
 * Defines a Cloud Watch Log Group Logging Configuration.
 */
class CloudWatchLogLocation extends LogLocationBase {
    constructor(props) {
        super(LogDestinationType.CLOUDWATCH, props);
        this.logDestinationType = LogDestinationType.CLOUDWATCH;
        this.logType = props.logType;
        // skip validation for late-bound values.
        if (!core.Token.isUnresolved(props.logGroup)) {
            if (!/^[a-zA-Z-_0-9/.#]{1,512}$/.test(props.logGroup)) {
                // Throws and error if logGroup is invalid format.
                throw new Error(`'LogGroup' must have 1-512 characters of only letters, numbers, hyphens, underscores, and pounds (#). Got: ${props.logGroup} `);
            }
        }
        this.logDestination = {
            logGroup: props.logGroup,
        };
    }
}
exports.CloudWatchLogLocation = CloudWatchLogLocation;
;
;
;
/**
 * Defines a Logging Configuration in the Stack
 * @resource AWS::NetworkFirewall::LoggingConfiguration
 */
class LoggingConfiguration extends core.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.loggingConfigurationName,
        });
        // skip validation for late-bound values.
        if (props.firewallName && !core.Token.isUnresolved(props.firewallName)) {
            if (!/^[a-zA-Z0-9-]{1,128}$/.test(props.firewallName)) {
                // Throws and error if logGroup is invalid format.
                throw new Error(`'FirewallName' must have 1-128 characters of only letters, numbers, and hyphens. Got: ${props.firewallName}`);
            }
        }
        this.firewallRef = props.firewallRef;
        this.firewallName = props.firewallName;
        this.loggingLocations = props.loggingLocations || [];
        const logDestinationConfigs = this.iLogLocationsToLogDestinationConfigProperty(this.loggingLocations);
        const loggingConfigurationProperty = {
            logDestinationConfigs: logDestinationConfigs,
        };
        const resourceProps = {
            firewallArn: this.firewallRef,
            loggingConfiguration: loggingConfigurationProperty,
            firewallName: props.firewallName,
        };
        const resource = new aws_networkfirewall_1.CfnLoggingConfiguration(scope, `${id}`, resourceProps);
        this.firewallRef = resource.firewallArn;
    }
    /**
     * Convert ILogLocation array to L1 LogDestinationConfigProperty array.
     * @param logLocations An array of assorted Log Locations
     * @returns Array of LogDestinationConfigProperty objects.
     */
    iLogLocationsToLogDestinationConfigProperty(logLocations) {
        let logDestinationConfigs = [];
        let logLocation;
        for (logLocation of logLocations) {
            logDestinationConfigs.push({
                logDestination: logLocation.logDestination,
                logDestinationType: logLocation.logDestinationType,
                logType: logLocation.logType,
            });
        }
        return logDestinationConfigs;
    }
}
exports.LoggingConfiguration = LoggingConfiguration;
;
//# sourceMappingURL=data:application/json;base64,